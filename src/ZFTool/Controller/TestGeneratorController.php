<?php

namespace ZFTool\Controller;

use Zend\Console\ColorInterface as Color;
use Zend\View\Model\ConsoleModel;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\Code\Generator;
use Zend\Code\Reflection;
use Zend\Console\Prompt;

/**
 * @todo: add the option to create the model file if non-existing class name was passed (TDD)
 * @todo: add the option to create test for individual methods
 * @todo: add the option to create the model file with all methods mapped to their test stubs
 * @fixme: add unit tests
 * @todo: diagnose if phpunit is used in the app
 *
 * @author countless-integers
 */
class TestGeneratorController extends AbstractActionController
{

    protected $testDirRoot = 'module';

    public function generateAction()
    {
        $console = $this->getServiceLocator()->get('console');
        $fileOrClass = $this->params('fileOrClass');
        $this->testDirRoot = $this->params('test-root-dir') ?: $this->testDirRoot;

        if (is_readable($fileOrClass)) {
            $console->writeLine("Valid filepathname give.", Color::GREEN);
            $fileReflection  = new Reflection\FileReflection($fileOrClass, true);
            $classReflection = $fileReflection->getClass();
        } elseif (class_exists($fileOrClass)) {
            $console->writeLine("Valid class name given.", Color::GREEN);
            $classReflection = new Reflection\ClassReflection($fileOrClass);
        } else {
            $console->writeLine("Neither valid class name nor valid pathfilename was passed to the generator. Aborting...", Color::RED);
            return false;
        }

        $namespace = explode('\\', $classReflection->getNamespaceName());
        $testClass = $classReflection->getShortName() . 'Test';
        $moduleName = $namespace[0];

        $testPath = implode(DIRECTORY_SEPARATOR, array(
            $this->testDirRoot,
            $moduleName,
            'test',
            implode(DIRECTORY_SEPARATOR, $namespace),
        ));
        $filenamePath = $testPath . DIRECTORY_SEPARATOR . $testClass . '.php';

        // overwrite with string version
        $namespace = $classReflection->getNamespaceName();

        if (!is_dir($testPath)) {
            mkdir($testPath, 0777, true);
        }

        if (file_exists($filenamePath)) {
            $prompt = new Prompt\Confirm(
                'There already seems to be a test at: ' . $filenamePath . '. Would you like to overwrite it? [y/n] '
            );
            if (!$prompt->show()) {
                $console->writeLine('Aborted by the user', Color::GREEN);
            }
        }
        $writeSuccessful = file_put_contents($filenamePath, $this->getTestBoilerplate($namespace, $testClass));
        if ($writeSuccessful) {
            $console->writeLine('Test file created at: ' . $filenamePath, Color::GREEN);
        } else {
            $console->writeLine('There was an error while trying to write file at: ' . $filenamePath, Color::RED);
        }
    }

    /**
     * @param $namepace string
     * @param $testClass string
     * @return string boilerplate test suite file
     */
    protected function getTestBoilerplate($namespace, $testClass)
    {
        if (!$namespace) {
            throw new \InvalidArgumentException('No test class namespace name provided');
        }
        if (!$testClass) {
            throw new \InvalidArgumentException('No test class name provided');
        }

        return <<<TEST
<?php

namespace $namespace;

/**
 * This class was generated by ZFTool test case generator
 */
class $testClass extends \PHPUnit_Framework_TestCase
{

    public function setUp()
    {
    }

    public function tearDown()
    {
    }

    /**
     * @test now start adding your own tests
     */
    public function example()
    {
    }
}
TEST;
    }
}

